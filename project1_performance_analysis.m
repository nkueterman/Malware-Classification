%% ECE 595 - Project 1
% Malware Classification Performance Analysis

% run_PCA_kNN_SVM
clear; close; clc;

% load data
load('malware_dataset.mat')
% normalize
data = rescale(data,0,1);

% rename to ensure no function shadowing
classLabels = label;
yActual = ind2vec(classLabels',10);

% display some of the malware images
randX = randi(size(data,1),100,1);
[figHandle, display_array] = displayData(data(randX,:));

% determine k-fold idices
k = 10;
[train_indices,test_indices] = kfold_indices(length(data),k);


for idx = 1:k
    
    trainData = data(train_indices{idx},:);
    validData = data(test_indices{idx},:);


    %% Perform PCA
    
    N = 20;

    [trainA,trainY,trainEigVals] = PCA_transformation(trainData,N);

    validY = validData * trainA;


    %% kNN
    
    Mdl = fitcknn(trainY,classLabels(train_indices{idx}),'DistanceWeight','squaredinverse',...
                                      'NumNeighbors',15,...
                                      'NSMethod','euclidean');

    yPredkNN{idx} = predict(Mdl,validY);


    %% Quadratic SVM
    
    typeSVM = 'polynomial'; order = 2; kernelScale = 'auto';

    t = templateSVM('KernelFunction',typeSVM,'PolynomialOrder',order,...
                    'KernelScale',kernelScale,'BoxConstraint',1,...
                    'Standardize',1);

    SVMModel = fitcecoc(trainY,classLabels(train_indices{idx}),'Learners',t,...
                        'Coding','onevsone');

    yPredSVM{idx} = predict(SVMModel,validY);

    %% Neural Network backpropagation
    
    % preprocess features for neural network
    X = horzcat(ones(length(classLabels(train_indices{idx})),1), trainData);
    
    % model parameters
    nHidden  = 10;
    nClasses = 10;
    n = 5000;
    alpha = 0.05;

    % initialize weights
    theta1   = (0.24).*rand(nHidden,size(X,2)) - 0.12;
    theta2   = (0.24).*rand(nClasses,nHidden+1)   - 0.12;

    % compute total cost
    [J,theta1,theta2] = nn_backpropagation(theta1,theta2,nClasses,nHidden,X,classLabels(train_indices{idx}),n,alpha);

    % predict class
    yPredNet{idx} = determine_output(theta1,theta2,horzcat(ones(size(validData,1),1),validData))';


end


    
%% Performance Analysis
test_idx = cell2mat(test_indices);

predkNN = cell2mat(yPredkNN(:));
predSVM = cell2mat(yPredSVM(:));
predNet = cell2mat(yPredNet(:));

figure
plotconfusion(yActual(:,test_idx),ind2vec(predkNN(:)',10))

figure
plotconfusion(yActual(:,test_idx),ind2vec(predSVM(:)',10))

figure
plotconfusion(yActual(:,test_idx),ind2vec(predNet(:)',10))


